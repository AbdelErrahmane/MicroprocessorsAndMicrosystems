
#include "eml_net.h"
static const float X40_MLP_L16_layer_0_biases[16] = { -1.041441f, -0.824484f, 0.008704f, -0.234474f, 1.477028f, 0.511527f, 0.877254f, -1.230046f, 1.815984f, -1.260301f, 2.072989f, 0.336065f, -1.283004f, 0.120410f, -0.267202f, -0.727360f };
static const float X40_MLP_L16_layer_0_weights[448] = { 1.914995f, 2.811295f, 2.723026f, -1.172535f, 0.821398f, -0.396192f, -2.966132f, -4.075983f, 1.474746f, -0.862901f, 0.064134f, -2.758231f, 0.506082f, -0.344698f, -0.464209f, 0.276047f, -3.066200f, -0.163507f, 1.441602f, 1.127569f, 0.211905f, -0.070320f, 0.077108f, -0.044760f, -0.103398f, 0.073360f, 0.407489f, 0.158342f, -0.339320f, -0.213733f, 0.062539f, 1.339226f, 0.835262f, 1.378719f, -0.138118f, -0.036259f, 0.504330f, 0.318927f, -0.646829f, -0.911096f, 0.666030f, -0.243110f, -0.174554f, 0.690934f, 0.593163f, -0.059541f, -0.324647f, -0.255556f, 0.085120f, 2.230209f, -0.020916f, 0.409129f, 0.091959f, 0.019078f, 0.395319f, 0.785851f, 0.367351f, -0.203824f, -0.033169f, -0.083625f, -0.367198f, -0.786624f, -0.155767f, -0.265396f, -1.522783f, -0.219371f, 2.521238f, -0.871025f, 1.187106f, -0.571036f, 3.309642f, -2.895891f, 2.068617f, 4.767657f, 2.631177f, -1.360809f, 0.364981f, -2.181078f, -1.048267f, -0.703194f, 2.642904f, -0.384425f, -0.623930f, -0.339726f, 4.904445f, -5.516954f, 0.670822f, -0.249486f, -0.048822f, 0.589897f, -0.691862f, -1.659526f, -2.849925f, -2.065221f, -0.299557f, -2.568141f, -0.489343f, -2.529588f, -0.428271f, 0.719543f, 0.554355f, -1.640439f, 2.653130f, 3.701213f, 1.943723f, 3.958422f, -0.159074f, 1.650876f, -2.096526f, -4.032258f, -0.054669f, 2.799077f, 0.421221f, -2.329389f, -2.778136f, -1.681789f, -0.164621f, -2.817235f, 1.280671f, 1.538553f, 2.479439f, 0.106361f, -0.232954f, 1.142355f, -0.395738f, -2.284403f, -2.211960f, 0.096349f, -1.615688f, 1.119074f, 5.236227f, 0.731482f, 1.011374f, -0.733489f, 0.537656f, 1.974774f, 0.976136f, -2.207070f, 6.454580f, 0.917555f, -2.076317f, -4.064098f, -2.924184f, 0.050764f, 3.589740f, -1.514956f, -3.722521f, 1.034976f, -0.438799f, 0.302336f, -1.695114f, 1.396205f, -0.521482f, 1.138845f, 0.383969f, -0.041557f, 0.190030f, 0.513896f, 1.658988f, 0.217848f, -0.359393f, -0.013859f, 0.815075f, 0.412174f, 0.954128f, 1.481328f, -0.840409f, 1.175986f, 0.810650f, -0.729947f, -0.590187f, -1.244305f, -0.841216f, 0.149031f, 0.736988f, -1.875096f, -0.445356f, 0.014197f, -0.193980f, -0.365028f, 0.250792f, 0.399741f, 0.386344f, -1.493909f, 0.815627f, 0.770295f, 1.042290f, 0.453839f, 0.606847f, 0.779452f, 0.088182f, -1.044134f, -0.356755f, 0.338809f, 0.176134f, -0.000199f, -0.201456f, -0.170880f, -0.350966f, -0.082225f, -0.138644f, 0.273257f, -0.106207f, 0.065942f, -0.349619f, -0.364738f, 0.204221f, -0.069469f, -0.157603f, 0.107194f, 0.304649f, -0.497063f, -0.060550f, -0.256571f, -0.101730f, -0.189055f, -0.146013f, -0.214098f, 0.835098f, 0.300336f, 0.185132f, -0.965376f, 0.168374f, 0.723841f, -0.474016f, -0.332491f, 0.049577f, -0.649145f, 1.072265f, -0.484257f, 0.285214f, -0.810296f, 0.566276f, -1.483361f, 0.522351f, 0.167837f, -1.116413f, 0.045592f, -1.429379f, 1.185586f, 0.227233f, -0.267126f, 0.010305f, -0.256621f, 0.596395f, 0.279167f, 0.038520f, -0.791436f, -0.258874f, 0.297878f, -0.173338f, 0.330014f, 0.077254f, -1.210314f, 0.808801f, -0.688722f, 0.038520f, 0.062529f, 0.341027f, -0.153092f, -0.188488f, -0.295222f, -0.357103f, 0.316640f, 0.126516f, 0.210619f, -0.163819f, 0.064170f, -0.322380f, -0.010767f, 0.352639f, 0.278055f, -0.119533f, 0.340951f, -0.198274f, 0.331895f, 0.325999f, 0.221021f, 0.096300f, 0.276173f, -0.152847f, 0.257685f, 0.086527f, -0.359449f, -0.112873f, -0.260140f, 0.355881f, -0.016031f, -2.583939f, 1.084851f, -0.306464f, -1.584548f, -0.033866f, 0.627541f, -0.104295f, 2.411994f, 0.696728f, -0.515293f, 1.783825f, 2.142221f, -0.551273f, 1.004007f, 0.608439f, -0.687330f, 1.167231f, -2.318703f, 0.099726f, 0.373134f, 1.661295f, -0.770811f, 0.866497f, -3.351142f, 0.367082f, -0.761127f, 0.664961f, -1.940920f, -0.203001f, 0.844882f, -1.150393f, 0.015663f, -0.583097f, -0.493746f, -0.000454f, -0.646328f, 0.977913f, 0.683643f, 0.052012f, -0.438233f, 1.333621f, -0.911600f, 2.202035f, 0.091056f, -0.835450f, 0.548052f, 0.031306f, -0.612759f, -1.152004f, -0.995175f, -0.104271f, -0.265832f, 0.413112f, -0.137191f, 0.597905f, -0.786778f, 0.403742f, -0.423643f, -0.521011f, 0.033514f, -0.549508f, 0.146487f, 0.107671f, -0.436622f, -0.052922f, 0.059955f, -0.131958f, 0.168468f, 0.297278f, -0.276800f, -0.009379f, 0.141631f, -0.085319f, 0.354545f, -0.522248f, 0.046845f, 0.073916f, -0.117703f, 0.209593f, -0.093920f, 0.298156f, 0.153725f, 0.093640f, -0.127118f, 0.246724f, 0.099971f, -0.204165f, -0.254198f, 0.222382f, 0.341698f, -0.106439f, 0.177739f, 0.243159f, -0.040211f, 0.334046f, 0.030779f, -0.243516f, 0.110369f, 1.252500f, -0.036722f, -0.089997f, 1.125120f, -0.829208f, 1.535073f, 0.313707f, -0.365644f, 0.652286f, -0.916963f, -0.211363f, 0.707409f, -0.275701f, -1.565528f, -0.978436f, -0.713243f, -0.936773f, -0.545582f, 1.595941f, -0.430061f, 0.864960f, -2.614464f, 1.118929f, -0.715240f, 1.184350f, 1.059603f, -0.874740f, -0.690057f, -0.515557f, 0.294377f, -0.272516f, -0.360384f, -0.283997f, 0.087482f, 0.350259f, 0.362150f, -0.067188f, -0.248982f, 0.102483f, -0.007153f, 0.361357f, -0.321013f, 0.209183f, -0.156292f, -0.190863f, 0.119746f, -0.187612f, 0.154873f, 0.005820f, -0.028868f, 0.046010f, -0.155406f, 0.152362f, -0.071149f, -0.102718f, 0.243651f, 0.307615f, -0.326638f, -0.422841f, -0.112767f, 0.241901f, 0.348641f };
static const float X40_MLP_L16_layer_1_biases[10] = { 3.719948f, 0.404126f, 0.593088f, -1.437092f, -0.085696f, 0.747875f, 0.106220f, -1.604943f, -1.099100f, -1.276377f };
static const float X40_MLP_L16_layer_1_weights[160] = { -0.111597f, -0.131509f, 0.897553f, -1.539896f, 1.733972f, -1.573223f, 1.203380f, -0.263524f, -0.172882f, 0.137016f, 2.059966f, -0.033691f, -3.254652f, 1.168976f, 1.015857f, 0.068386f, -0.800329f, 1.805977f, -1.222571f, -0.098638f, -2.440770f, 0.462289f, 1.404990f, 1.886698f, -0.789842f, -1.094496f, -0.088464f, 0.736400f, -0.038448f, 0.633057f, -0.545149f, -1.537342f, 1.748455f, -1.510278f, 2.150929f, -1.564110f, 0.923341f, -0.277685f, -0.057220f, 0.086975f, 3.568796f, -3.194766f, 1.610224f, 0.874448f, 1.500868f, -3.571484f, 0.297531f, -0.615413f, -0.468904f, -0.249014f, 0.707740f, 0.848867f, -4.066453f, 0.200853f, -0.039082f, 2.076926f, -0.232259f, 1.177725f, -0.861240f, 0.188807f, -1.176514f, -2.135737f, 0.406974f, 0.879576f, -1.382993f, 2.272573f, -0.371137f, 0.679930f, 0.326463f, -0.847217f, -3.216174f, -2.549796f, 1.255428f, 2.054489f, 2.810565f, 0.207114f, -0.362226f, -0.482120f, 0.585128f, -0.246959f, -0.343788f, -2.127975f, -0.049187f, 0.466648f, 0.361998f, 1.139998f, 1.163832f, -0.426900f, 0.103021f, -0.111205f, 0.701288f, -0.196935f, -3.866821f, -0.683802f, 1.718574f, 1.845066f, -0.968593f, 0.997496f, 1.043226f, -0.072787f, -2.605832f, 3.941700f, 0.701550f, -0.300864f, 2.051264f, -0.119958f, -0.757584f, -0.608426f, -0.796303f, -0.345262f, 3.654456f, -0.103487f, -2.185405f, 0.068446f, -0.805346f, 0.912610f, 1.144884f, -0.686824f, -0.180486f, -1.827196f, -2.575344f, -1.207756f, -0.799210f, -0.793364f, -0.157196f, 4.617745f, -1.972689f, 1.768565f, 0.489328f, 0.487440f, -1.497530f, -1.266609f, 3.868785f, -1.370533f, 2.647957f, 0.458409f, -0.453430f, -1.624801f, -0.254821f, -0.757975f, 1.777471f, 1.943197f, -0.154697f, 1.073263f, -2.837317f, -0.320301f, -1.564951f, -0.519490f, 0.057493f, -0.042966f, -1.265675f, -0.081519f, 0.511362f, 0.559906f, -1.853310f, 2.583034f, -1.486352f, 0.349372f, 0.643839f, 0.626249f };
static float X40_MLP_L16_buf1[28];
static float X40_MLP_L16_buf2[28];
static const EmlNetLayer X40_MLP_L16_layers[2] = { 
{ 16, 28, X40_MLP_L16_layer_0_weights, X40_MLP_L16_layer_0_biases, EmlNetActivationTanh }, 
{ 10, 16, X40_MLP_L16_layer_1_weights, X40_MLP_L16_layer_1_biases, EmlNetActivationSoftmax } };
static EmlNet X40_MLP_L16 = { 2, X40_MLP_L16_layers, X40_MLP_L16_buf1, X40_MLP_L16_buf2, 28 };

    int32_t
    X40_MLP_L16_predict(const float *features, int32_t n_features)
    {
        return eml_net_predict(&X40_MLP_L16, features, n_features);
    }
    

    int32_t
    X40_MLP_L16_regress(const float *features, int32_t n_features, float *out, int32_t out_length)
    {
        return eml_net_regress(&X40_MLP_L16, features, n_features, out, out_length);
    }
    

    float
    X40_MLP_L16_regress1(const float *features, int32_t n_features)
    {
        return eml_net_regress1(&X40_MLP_L16, features, n_features);
    }
    